################################################################################
#
# Multivariate relaxed clock Ornstein-Uhlbeck model 
# for evolution of continuous correlated characters with stablizing selection
# varying branch rates and optima
#
# authors: Shubhi Sharma
#
################################################################################

#reading in the data 
dataset <- 1 

T <- readTrees("haemulidae.nex")[dataset]

ntips <- T.ntips()
nbranches <- 2 * ntips - 2

data <- readContinuousCharacterData("haemulidae_trophic_traits.nex")

moves = VectorMoves()
monitors = VectorMonitors()

#record the number of characters for future reference
nchar <- data.nchar()

tree <- T 

#rate parameter root
sigma2_root ~ dnLoguniform(1e-3, 1)
moves.append(mvScale(sigma2_root, weight = 1.0))

#adaptation paramets 
alpha ~ dnExponential(10)
moves.append(mvScale(alpha, weight = 1.0))

#optima 
theta_root ~ dnUniform(-10, 10)
moves.append(mvSlide(theta_root, weight = 1.0))

expected_number_of_shifts <- 5
shift_probability <- expected_number_of_shifts / nbranches 
rate_shift_probability <- expected_number_of_shifts/nbranches


#prior on size of rate shifts 
sd_r = 0.578 
rate_shift_distribution = dnLognormal(-sd_r^2/2, sd_r)
#potentially make this 1 

#relative rates of evolution among characters 
#alpha1 <- 1.0
#proportional_rates ~ dnDirichlet(rep(alpha1, nchar))
#relative_rates := proportional_rates * nchar 

#multivariate beta simplex move to the proportional rates 
#moves.append(mvBetaSimplex(proportional_rates, weight = 2.0 ))

#correlation matrix 
#eta <- 1.0 
#R ~ dnLKJ(eta, nchar )

#moves.append(mvCorrelationMatrixRandomWalk(R, weight = 3.0))
#moves.append(mvCorrelationMatrixSingleElementBeta(R, weight = 5.0))

#correlations := R.upperTriangle()

#V := fnDecompVarCovar(relative_rates ^ 0.5, R)

shift_distribution = dnNormal(0, 0.0587) #what are these

#loop over branches 

for(i in nbranches:1){

    #draw the theta shift from a mixture distribution 
    branch_deltas[i]   ~ dnReversibleJumpMixture(0, shift_distribution, Probability(1 - shift_probability))

    # draw the rate multiplier from a mixture distribution 
    branch_rate_multiplier[i] ~ dnReversibleJumpMixture(1, rate_shift_distribution, Probability(1 - rate_shift_probability))

    #compute the theta for the branch 
    if(tree.isRoot(tree.parent(i))){
        branch_thetas[i] := theta_root + branch_deltas[i]
    } else {
        branch_thetas[i] := branch_thetas[tree.parent(i)] + branch_deltas[i]
    }

    # compute the rate for the branch 
    if (tree.isRoot(tree.parent(i))){
        branch_rates[i] := sigma2_root * branch_rate_multiplier[i]
    }else{
        branch_rates[i] := branch_rates[tree.parent(i)] * branch_rate_multiplier[i]
    }

    #keep track of whether the branch has a rate shift 
    branch_rate_shift[i] := ifelse( branch_rate_multiplier[i] == 1, 0, 1)

    #use reversible jump to move between models with and without shifts on the branch 
    moves.append(mvRJSwitch(branch_rate_multiplier[i], weight = 1))

    #include proposals on the rate multiplier (when it is not 1)

    moves.append(mvScale(branch_rate_multiplier[i], weight = 1))

    #keep track of whether the branch has a shift 
    branch_theta_shift[i] := ifelse(branch_deltas[i] == 0, 0, 1)

    #use reversible-jump to move between with and without
    #shifts on the branch 
    moves.append(mvRJSwitch(branch_deltas[i], weight = 1))

    #include proposals on the shift (when it is not 1 )
    moves.append(mvScale(branch_deltas[i], weight = 1))

}

#keep track of total number of rate shifts 
num_theta_changes := sum(branch_theta_shift)

X ~ dnPhyloOrnsteinUhlenbeckMVN(tree, alpha, branch_thetas, branch_rates^0.5, rootStates = theta_root)

X.clamp(data)

mymodel = model(X)

monitors.append(mnModel(filename = "output/relaxed_mvn_OU.log", printgen = 10))

monitors.append(mnScreen(printgen = 1000, branch_rates, branch_thetas, num_theta_changes))

#initalizing and running mcmc simulation 

mymcmc = mcmc(mymodel, monitors, moves, nruns = 2, combine = "mixed")

mymcmc.run(generations = 50000)

