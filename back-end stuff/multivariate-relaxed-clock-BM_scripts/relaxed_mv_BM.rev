################################################################################
#
# Multivariate relaxed clock Brownian motion model 
# for evolution of continuous correlated characters
#
#
# authors: Shubhi Sharma
#
################################################################################

#read in data
dataset <- 1 

T <- readTrees("pine.nex")[dataset]
ntips <- T.ntips()
nbranches <- 2* ntips - 2

data <- readContinuousCharacterData("annotated.nex")

#initialize variables for vector of moves and monitors 

moves = VectorMoves()
monitors = VectorMonitors()

#record the number of characters for future reference
nchar <- data.nchar()

#specifying the model 

tree <- T 

sigma2_root ~ dnLoguniform(1e-3, 1)
moves.append(mvScale(sigma2_root, weight = 1.0))

#relaxed clock multivariate model 

#prior on expected number of shifts 
expected_number_of_shifts <- 5
rate_shift_probability <- expected_number_of_shifts/nbranches

#prior on size of rate shifts 
sd_r = 0.578 
rate_shift_distribution = dnLognormal(-sd_r^2/2, sd_r)
#potentially make this 1 

#relative rates of evolution among characters 
alpha <- 1.0
proportional_rates ~ dnDirichlet(rep(alpha, nchar))
relative_rates := proportional_rates * nchar 

#multivariate beta simplex move to the proportional rates 
moves.append(mvBetaSimplex(proportional_rates, weight = 2.0 ))

#correlation matrix 
eta <- 1.0 
R ~ dnLKJ(eta, nchar )

moves.append(mvCorrelationMatrixRandomWalk(R, weight = 3.0))
moves.append(mvCorrelationMatrixSingleElementBeta(R, weight = 5.0))

correlations := R.upperTriangle()

V := fnDecompVarCovar(relative_rates ^ 0.5, R)

#loop over each branch drawing the rate shift multiplier from a mixture distribution 

for(i in nbranches:1){

    # draw the rate multiplier from a mixture distribution 
    branch_rate_multiplier[i] ~ dnReversibleJumpMixture(1, rate_shift_distribution, Probability(1 - rate_shift_probability))

    # compute the rate for the branch 
    if (tree.isRoot(tree.parent(i))){
        branch_rates[i] := sigma2_root * branch_rate_multiplier[i]
    }else{
        branch_rates[i] := branch_rates[tree.parent(i)] * branch_rate_multiplier[i]
    }

    #keep track of whether the branch has a rate shift 
    branch_rate_shift[i] := ifelse( branch_rate_multiplier[i] == 1, 0, 1)

    #use reversible jump to move between models with and without shifts on the branch 
    moves.append(mvRJSwitch(branch_rate_multiplier[i], weight = 1))

    #include proposals on the rate multiplier (when it is not 1)

    moves.append(mvScale(branch_rate_multiplier[i], weight = 1))

}
# keep track of total number of rate shifts 
num_rate_changes := sum(branch_rate_shift)

#likelihood
X ~ dnPhyloMultivariateBrownianREML(tree, branchRates = branch_rates^0.5, rateMatrix = V)

X.clamp(data)

mymodel = model(sigma2_root)

#Running the MCMC analysis 

monitors.append(mnModel(filename = "output/multivariate_relaxed_BM.log", printgen = 10))
monitors.append(mnScreen(printgen = 1000, sigma2_root, num_rate_changes))

#intializing and running 
mymcmc = mcmc(mymodel, monitors, moves, nruns = 2, combine = "mixed")
mymcmc.run(generations = 50000)