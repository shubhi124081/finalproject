################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   constant-rate multivariate Brownian-motion model
#
#
# authors: Michael R. May
#
################################################################################

#######################
# Reading in the Data #
#######################

### Read in the tree
T <- readTrees("haemulidae.nex")[1]

### Read in the continuous-character data
data <- readContinuousCharacterData("haemulidae_trophic_traits.nex")
nchar <- data.nchar()

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##########################
# Specify the tree model #
##########################

tree <- T

#########################################
# Specify the variance-covariance model #
#########################################

# the average rate of evolution
sigma2 ~ dnLoguniform(1e-3, 1)
moves.append( mvScale(sigma2, weight=1.0) )

# the (marginal) rates among characters
alpha <- 1.0
proportional_rates ~ dnDirichlet( rep(alpha, nchar) )
relative_rates := proportional_rates * nchar
moves.append( mvBetaSimplex(proportional_rates, weight=2.0) )

# the correlations among characters
eta <- 1.0
R ~ dnLKJ( eta, nchar )

moves.append( mvCorrelationMatrixRandomWalk(R, weight=3.0) )
moves.append( mvCorrelationMatrixSingleElementBeta(R, weight=5.0) )

correlations := R.upperTriangle()

# construct the variance-covariance matrix
V := fnDecompVarCovar( relative_rates^0.5, R )

##########################
# Specify the BM process #
##########################

X ~ dnPhyloMultivariateBrownianREML(tree, branchRates=sigma2^0.5, rateMatrix=V)
X.clamp(data)



#############
# The Model #
#############

mymodel = model(sigma2)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/multivariate_BM.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, sigma2) )




################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")


### run the MCMC ###
mymcmc.burnin(generations=1000, tuningInterval=100)
mymcmc.run(generations=50000)

## quit ##
q()
